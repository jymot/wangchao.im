<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[M.O.T]]></title>
  <subtitle><![CDATA[Magician.of.Technique]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-05-06T07:59:06.102Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wang Chao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[多平台使用字体图标]]></title>
    <link href="http://yoursite.com/2016/05/06/font-icon-about/"/>
    <id>http://yoursite.com/2016/05/06/font-icon-about/</id>
    <published>2016-05-06T05:40:41.000Z</published>
    <updated>2016-05-06T07:59:06.102Z</updated>
    <content type="html"><![CDATA[<p>最近比较流行字体图标，下面说一下分别在HTML、Android和iOS中怎么使用字体图标。</p>
<h3 id="u4E00_u3001HTML"><a href="#u4E00_u3001HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><h4 id="u5177_u4F53_u6B65_u9AA4"><a href="#u5177_u4F53_u6B65_u9AA4" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>1.font-face声明字体<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'iconfont'</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'iconfont.eot'</span>)</span></span>; <span class="comment">/* IE9*/</span></span><br><span class="line">    <span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'iconfont.eot?#iefix'</span>) <span class="function">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">    <span class="function">url</span>(<span class="string">'iconfont.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>), <span class="comment">/* chrome、firefox */</span></span><br><span class="line">    <span class="function">url</span>(<span class="string">'iconfont.ttf'</span>) <span class="function">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span></span><br><span class="line">    <span class="function">url</span>(<span class="string">'iconfont.svg#iconfont'</span>) <span class="function">format</span>(<span class="string">'svg'</span>)</span></span>; <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>2.定义使用iconfont的样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.iconfont</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value"><span class="string">"iconfont"</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">16px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value">normal</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>3.挑选相应图标并获取字体编码，应用于页面<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class="iconfont"&gt;&amp;#33&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="u5E38_u89C1_u95EE_u9898"><a href="#u5E38_u89C1_u95EE_u9898" class="headerlink" title="常见问题"></a>常见问题</h4><p>1.字体图标在safair或chrome浏览器下被加粗？<br>由于字体图标存在半个像素的锯齿，在浏览器渲染的时候直接显示一个像素了，导致在有背景下的图标显示感觉加粗；所以在应用字体图标的时候需要对图标样式进行抗锯齿处理，CSS代码设置如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.iconfont</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-font-smoothing</span>:<span class="value"> antialiased</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>2.字体图标在IE7浏览器显示中图标右侧出现小方框现象？<br>可以对引用字体图标的非块标签进行以下CSS定义:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">display</span>: <span class="tag">block</span>;</span><br></pre></td></tr></table></figure></p>
<p>3.字体图标在pc端的chrome浏览器下出现严重的锯齿？<br>可以对字体图标的边缘进行模糊；（只支持webkit内核浏览器,参数数值不宜设置得很大，这会带来图标加粗的问题）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-webkit-text-stroke-width</span>: 0<span class="class">.2px</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E8C_u3001Android"><a href="#u4E8C_u3001Android" class="headerlink" title="二、Android"></a>二、Android</h3><h4 id="u5177_u4F53_u6B65_u9AA4-1"><a href="#u5177_u4F53_u6B65_u9AA4-1" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>1.复制字体文件到项目 assets 目录；<br>2.打开 iconfont 目录中的 demo.html，找到图标相对应的 HTML 实体字符码；<br>3.打开 res/values/strings.xml，添加 string 值；<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"icons"</span>&gt;</span>&amp;#x3605; &amp;#x35ad; &amp;#x35ae; &amp;#x35af;<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>4.添加 string 值到 TextView：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/iconfont"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@string/icons"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>5.为 TextView 设置字体<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Typeface iconfont = Typeface.createFromAsset(getAssets(), <span class="string">"iconfont/iconfont.ttf"</span>);</span><br><span class="line">TextView textview = (TextView)findViewById(R.id.like);</span><br><span class="line">textview.setTypeface(iconfont);</span><br></pre></td></tr></table></figure></p>
<h3 id="u4E09_u3001iOS"><a href="#u4E09_u3001iOS" class="headerlink" title="三、iOS"></a>三、iOS</h3><h4 id="u5177_u4F53_u6B65_u9AA4-2"><a href="#u5177_u4F53_u6B65_u9AA4-2" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>1.将您IconFont刚下载的字体文件(.ttf)添加到工程中<br>2.打开Info.plist文件，增加一个新的Array类型的键，键名设置为UIAppFonts（Fonts provided by application），增加字体的文件名：“iconfont.ttf“<br>3.使用IconFont字体:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UILabel * label = [[UILabel alloc] initWithFrame:self.view.bounds];</span><br><span class="line">UIFont *iconfont = [UIFont fontWithName:@<span class="string">"uxIconFont"</span> size: <span class="number">34</span>];</span><br><span class="line">label.font = iconfont;</span><br><span class="line">label.text = @<span class="string">"\U00003439 \U000035ad \U000035ae \U000035af \U000035eb \U000035ec"</span>;</span><br><span class="line">[self.view addSubview: label];</span><br></pre></td></tr></table></figure></p>
<h4 id="u6CE8_u610F"><a href="#u6CE8_u610F" class="headerlink" title="注意"></a>注意</h4><p>创建 UIFont 使用的是字体名，而不是文件名；<br>文本值为 8 位的 Unicode 字符，我们可以打开 demo.html 查找每个图标所对应的 HTML 实体 Unicode 码，比如：<br>“店” 对应的 HTML 实体 Unicode 码为：<br>0x3439<br>转换后为<br>\U00003439<br>就是将 0x 替换为 \U 中间用 0 填补满长度为 8 个字符</p>
<h3 id="u56DB_u3001_u56FE_u6807_u5236_u4F5C"><a href="#u56DB_u3001_u56FE_u6807_u5236_u4F5C" class="headerlink" title="四、图标制作"></a>四、图标制作</h3><p><a href="http://iconfont.cn/help/iconmake.html" target="_blank" rel="external">link</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近比较流行字体图标，下面说一下分别在HTML、Android和iOS中怎么使用字体图标。</p>
<h3 id="u4E00_u3001HTML"><a href="#u4E00_u3001HTML" class="headerlink" title="一、HTML"><]]>
    </summary>
    
      <category term="字体图标" scheme="http://yoursite.com/tags/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
    
      <category term="Client" scheme="http://yoursite.com/categories/Client/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android插件化相关知识点]]></title>
    <link href="http://yoursite.com/2016/05/04/android-plugin-arrangement/"/>
    <id>http://yoursite.com/2016/05/04/android-plugin-arrangement/</id>
    <published>2016-05-04T00:36:43.000Z</published>
    <updated>2016-05-06T07:59:06.102Z</updated>
    <content type="html"><![CDATA[<p>关于Android插件化开发涉及到的一些知识点汇总：</p>
<h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><p>1.<a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="external">Java 类加载器</a><br>2.<a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH16.md" target="_blank" rel="external">反射原理</a><br>3.<a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">代理模式及Java实现动态代理</a></p>
<h3 id="u5165_u95E8"><a href="#u5165_u95E8" class="headerlink" title="入门"></a>入门</h3><p>1.<a href="http://104.236.134.90/2016/02/02/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">Android插件化入门</a><br>2.<a href="http://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">插件化开发—动态加载技术加载已安装和未安装的apk</a><br>3.<a href="https://blog.tingyun.com/web/article/detail/166" target="_blank" rel="external">Android动态加载技术三个关键问题详解</a></p>
<h3 id="u8FDB_u9636"><a href="#u8FDB_u9636" class="headerlink" title="进阶"></a>进阶</h3><p>1.<a href="http://mp.weixin.qq.com/s?__biz=MzAwMTcwNTE0NA==&amp;mid=400217391&amp;idx=1&amp;sn=86181541ce0164156dfab135ed99bb5c&amp;scene=0&amp;key=b410d3164f5f798e61a5d4afb759fa38371c8b119384c6163a30c28163b4d4d5f59399f2400800ec842f1d0e0ffb84af&amp;ascene=0&amp;uin=MjExMjQ&amp;pass_ticket=Nt5Jaa28jjFxcQO9o%2BvQiXX%2B0iXG5DlZlHNW97Fk1Ew%3D" target="_blank" rel="external">携程Android App插件化和动态加载实践</a><br>2.<a href="http://blog.csdn.net/hkxxx/article/details/42194387" target="_blank" rel="external">动态加载APK原理分享</a><br>3.<a href="http://www.cnblogs.com/coding-way/p/4669591.html" target="_blank" rel="external">Android插件化的一种实现</a><br>4.<a href="http://mogu.io/117-117" target="_blank" rel="external">蘑菇街 App 的组件化之路</a><br>5.<a href="http://www.codekk.com/open-source-project-analysis/detail/Android/FFish/DynamicLoadApk%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">DynamicLoadApk 源码解析</a><br>6.<a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">Android apk动态加载机制的研究</a><br>7.<a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团Android DEX自动拆包及动态加载简介</a><br>8.<a href="http://blog.csdn.net/singwhatiwanna/article/details/23387079" target="_blank" rel="external">Android apk资源加载和activity生命周期管理</a><br>9.<a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">APK动态加载框架（DL）解析</a></p>
<h3 id="u7CFB_u5217"><a href="#u7CFB_u5217" class="headerlink" title="系列"></a>系列</h3><p>1.<a href="https://segmentfault.com/a/1190000004062866" target="_blank" rel="external">Kaedea—Android动态加载技术 简单易懂的介绍</a><br>2.<a href="https://segmentfault.com/a/1190000004062880" target="_blank" rel="external">Kaedea—Android动态加载基础 ClassLoader的工作机制</a><br>3.<a href="https://segmentfault.com/a/1190000004062899" target="_blank" rel="external">Kaedea—Android动态加载补充 加载SD卡的SO库</a><br>4.<a href="https://segmentfault.com/a/1190000004062952" target="_blank" rel="external">Kaedea—Android动态加载入门 简单加载模式</a><br>5.<a href="https://segmentfault.com/a/1190000004062972" target="_blank" rel="external">Kaedea—Android动态加载进阶 代理Activity模式</a><br>6.<a href="https://segmentfault.com/a/1190000004077469" target="_blank" rel="external">Kaedea—Android动态加载黑科技 动态创建Activity模式</a><br>7.<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823" target="_blank" rel="external">尼古拉斯—插件开发基础篇：动态加载技术解读</a><br>8.<a href="http://blog.csdn.net/jiangwei0910410003/article/details/41384667" target="_blank" rel="external">尼古拉斯—插件开发开篇：类加载器分析</a><br>9.<a href="http://blog.csdn.net/jiangwei0910410003/article/details/47679843" target="_blank" rel="external">尼古拉斯—插件开发中篇：资源加载问题(换肤原理解析)</a><br>10.<a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104455" target="_blank" rel="external">尼古拉斯—插件开发终极篇：动态加载Activity(免安装运行程序)</a><br>11.<a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="external">Weishu—Android插件化原理解析——概要</a><br>12.<a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="external">Weishu—Android插件化原理解析——Hook机制之动态代理</a><br>13.<a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/" target="_blank" rel="external">Weishu—Android插件化原理解析——Hook机制之Binder Hook</a><br>14.<a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/" target="_blank" rel="external">Weishu—Android 插件化原理解析——Hook机制之AMS&amp;PMS</a><br>15.<a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="external">Weishu—Android 插件化原理解析——Activity生命周期管理</a><br>16.<a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">Weishu—Android 插件化原理解析——插件加载机制</a><br>17.<a href="http://weishu.me/2016/04/12/understand-plugin-framework-receiver/" target="_blank" rel="external">Weishu—Android插件化原理解析——广播的管理</a></p>
<h3 id="u7C7B_u5E93"><a href="#u7C7B_u5E93" class="headerlink" title="类库"></a>类库</h3><p>1.<a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a><br>2.<a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android-Plugin-Framework</a><br>3.<a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">DynamicAPK</a><br>4.<a href="https://github.com/DroidPluginTeam/DroidPlugin" target="_blank" rel="external">DroidPlugin</a><br>5.<a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">android-pluginmgr</a><br>6.<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a><br>7.<a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">AndroidDynamicLoader</a><br>8.<a href="https://github.com/bunnyblue/ACDD/blob/master/README-Zh.md" target="_blank" rel="external">ACDD</a></p>
<h3 id="u53C2_u8003_u89C6_u9891"><a href="#u53C2_u8003_u89C6_u9891" class="headerlink" title="参考视频"></a>参考视频</h3><p>1.<a href="http://v.youku.com/v_show/id_XNTMzMjYzMzM2.html" target="_blank" rel="external">android插件化及动态部署</a><br>阿里技术沙龙第十六期《android插件化及动态部署》视频</p>
<p>ps: 本文转自<a href="http://www.androidblog.cn/index.php/Index/detail/id/16" target="_blank" rel="external">Android博客周刊</a>，阅读完这些博客后，我也会对每篇博客做一个总结</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于Android插件化开发涉及到的一些知识点汇总：</p>
<h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><p>1.<a href="https:/]]>
    </summary>
    
      <category term="Android Plugin" scheme="http://yoursite.com/tags/Android-Plugin/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 5.0后自定义权限注意事项]]></title>
    <link href="http://yoursite.com/2016/05/03/android-5-0-custom-permission/"/>
    <id>http://yoursite.com/2016/05/03/android-5-0-custom-permission/</id>
    <published>2016-05-03T05:35:05.000Z</published>
    <updated>2016-05-03T05:43:07.580Z</updated>
    <content type="html"><![CDATA[<h3 id="Android_5-0__u8BF4_u660E"><a href="#Android_5-0__u8BF4_u660E" class="headerlink" title="Android 5.0 说明"></a>Android 5.0 说明</h3><p>Starting in Android 5.0, the system enforces a new uniqueness restriction on custom permissions<br>for apps that are signed with different keys. Now only one app on a device can define a given<br>custom permission (as determined by its name), unless the other app defining the permission is<br>signed with the same key. If the user tries to install an app with a duplicate custom permission<br>and is not signed with the same key as the resident app that defines the permission, the system blocks<br>the installation.</p>
<h3 id="u89E3_u91CA"><a href="#u89E3_u91CA" class="headerlink" title="解释"></a>解释</h3><p>所以当我们在Android 5.0以及以上系统中使用自定义权限的时候，如果两个APK具有相同的签名，那么就不能使用相同命名的自定义权限。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Android_5-0__u8BF4_u660E"><a href="#Android_5-0__u8BF4_u660E" class="headerlink" title="Android 5.0 说明"></a>Android 5.0 说明</h3><p>St]]>
    </summary>
    
      <category term="Android Permission" scheme="http://yoursite.com/tags/Android-Permission/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android更新APK提示解析包时出现错误]]></title>
    <link href="http://yoursite.com/2016/05/03/android-apk-upgrade-error/"/>
    <id>http://yoursite.com/2016/05/03/android-apk-upgrade-error/</id>
    <published>2016-05-03T05:21:51.000Z</published>
    <updated>2016-05-03T05:43:07.580Z</updated>
    <content type="html"><![CDATA[<p>今天在测试客户端升级的时候，突然发现客户端在升级的时候下载成功升级包后，安装过程中提示“解析包时出现错误”，<br>因为这个错误可能有多个问题导致，比如安装包下载不完整等。<br><a id="more"></a></p>
<p>然后我检查了一下下载后的安装包，单独安装是可以的，所以说明包是没问题的；然后我又检查了一下对应的证书签名是否<br>一致，也是一致的，所以这个问题应该不是出在这里，然后就开始看升级这部分的代码，才发现这个问题的原因。</p>
<p>代码中写的是将下载成功后的安装包保存到了该应用的包目录下，这里是不对的，<code>因为应用包目录只有应用本身有读取权限，
系统安装程序是没有访问这个文件或目录的权限的。</code> 经过修改后，应该把安装包放到SD卡目录(需要判断是否有SD卡)或者<br>包资源路径。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Environment.getExternalStorageDirectory().getPath();</span><br><span class="line">context.getPackageResourcePath();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在测试客户端升级的时候，突然发现客户端在升级的时候下载成功升级包后，安装过程中提示“解析包时出现错误”，<br>因为这个错误可能有多个问题导致，比如安装包下载不完整等。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[xcode7中NSURLSession发送HTTP异常]]></title>
    <link href="http://yoursite.com/2016/02/23/xcode7-nsurlsession-send-http/"/>
    <id>http://yoursite.com/2016/02/23/xcode7-nsurlsession-send-http/</id>
    <published>2016-02-23T08:52:17.000Z</published>
    <updated>2016-02-23T09:02:33.763Z</updated>
    <content type="html"><![CDATA[<p>今天在使用NSURLSession时候报了如下的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</span><br></pre></td></tr></table></figure></p>
<p>解决办法如下为在info.plist文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;key&#62;NSAppTransportSecurity&#60;/key&#62;&#10;    &#60;dict&#62;&#10;        &#60;key&#62;NSAllowsArbitraryLoads&#60;/key&#62;&#10;        &#60;true/&#62;&#10;    &#60;/dict&#62;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在使用NSURLSession时候报了如下的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenSSL之RSA]]></title>
    <link href="http://yoursite.com/2016/01/21/openssl-rsa-20160121/"/>
    <id>http://yoursite.com/2016/01/21/openssl-rsa-20160121/</id>
    <published>2016-01-21T14:02:22.000Z</published>
    <updated>2016-01-21T14:32:53.179Z</updated>
    <content type="html"><![CDATA[<p>OpenSSL集成了众多密码算法，今天主要说下RSA非对称加解密以及在Android中的使用。<br>那么我们需要先了解一下OpenSSL关于RSA的相关命令使用方法<br><a id="more"></a></p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><h4 id="1-_u751F_u6210_u79C1_u94A5"><a href="#1-_u751F_u6210_u79C1_u94A5" class="headerlink" title="1.生成私钥"></a>1.生成私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private.pem <span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p>如上所示，我们即生成了名为private.pem的私钥文件，密钥长度1024，密钥长度范围在512～2024之间</p>
<h4 id="2-_u751F_u6210_u516C_u94A5"><a href="#2-_u751F_u6210_u516C_u94A5" class="headerlink" title="2.生成公钥"></a>2.生成公钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in private.pem -pubout -out public.pem</span><br></pre></td></tr></table></figure>
<p>所以我们就生成了公钥文件</p>
<h4 id="3-_u516C_u94A5_u52A0_u5BC6"><a href="#3-_u516C_u94A5_u52A0_u5BC6" class="headerlink" title="3.公钥加密"></a>3.公钥加密</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -encrypt -in fileName -inkey public.pem -pubin -out fileName.en</span><br></pre></td></tr></table></figure>
<p>如上所示，我们用公钥对fileName文件进行了加密得到fileName.en文件</p>
<h4 id="4-_u79C1_u94A5_u89E3_u5BC6"><a href="#4-_u79C1_u94A5_u89E3_u5BC6" class="headerlink" title="4.私钥解密"></a>4.私钥解密</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -in fileName.en -inkey private.key -out fileName.de</span><br></pre></td></tr></table></figure>
<p>我们用私钥对fileName.en文件解密得到fileName.de文件</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>说到这里，对于RSA的基本操作就结束了，但是我们一般生成密钥对后，我们需要在我们的代码中使用，这里以Android<br>为例，但是我们在代码中不能直接使用之前生成的私钥，需要对密钥进行PKCS#8编码，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -in private.pem -out private_android.pem -nocrypt</span><br></pre></td></tr></table></figure></p>
<p>我们得到的private_android.pem就可以在代码中使用了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OpenSSL集成了众多密码算法，今天主要说下RSA非对称加解密以及在Android中的使用。<br>那么我们需要先了解一下OpenSSL关于RSA的相关命令使用方法<br>]]>
    
    </summary>
    
      <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
      <category term="Openssl" scheme="http://yoursite.com/categories/Openssl/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android二次打包]]></title>
    <link href="http://yoursite.com/2016/01/20/android-secondary-build/"/>
    <id>http://yoursite.com/2016/01/20/android-secondary-build/</id>
    <published>2016-01-20T13:51:02.000Z</published>
    <updated>2016-01-21T00:16:13.531Z</updated>
    <content type="html"><![CDATA[<p>关于Android二次打包，有的是为了更换证书，有的是为了修改资源，有的是为了注入广告，不管处于什么样的目的，都希望<br>用于正当渠道。废话不多说，直接进入正题。</p>
<a id="more"></a>
<h4 id="1-_u51C6_u5907_u5DE5_u4F5C"><a href="#1-_u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>我们需要下载<a href="https://github.com/iBotPeaches/Apktool" target="_blank" rel="external">ApkTool</a>工具（关于该工具的下载和安装在官网都有详细的步骤，在这里就不多说了），然后确保keytool和<br>jarsigner命令是可用的。</p>
<h4 id="2-_u53CD_u7F16_u8BD1"><a href="#2-_u53CD_u7F16_u8BD1" class="headerlink" title="2.反编译"></a>2.反编译</h4><p>我们使用ApkTool进行反编译APK，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d -o app app.apk</span><br></pre></td></tr></table></figure></p>
<p>就会将反编译结果放到app目录下，然后就可以修改反编译后的app目录中的内容，比如图片或代码</p>
<h4 id="3-_u7F16_u8BD1"><a href="#3-_u7F16_u8BD1" class="headerlink" title="3.编译"></a>3.编译</h4><p>接下来执行如下命令，将修改后的目录重新打包为APK<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b -o app_fix.apk app</span><br></pre></td></tr></table></figure></p>
<p>这样我们就生成了新的修改后的app_fix.apk</p>
<h4 id="4-_u751F_u6210keystore"><a href="#4-_u751F_u6210keystore" class="headerlink" title="4.生成keystore"></a>4.生成keystore</h4><p>使用keytool命令生成keystore，具体如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias <span class="built_in">test</span> -keyalg RSA -validity <span class="number">20000</span> -keystore test.keystore</span><br></pre></td></tr></table></figure></p>
<p>然后会提示我们录入密钥口令，还有输入一些信息，根据提示填写即可，执行结束后就会生成一个别名为<code>test</code>的<code>test.keystore</code></p>
<h4 id="5-_u7B7E_u540D"><a href="#5-_u7B7E_u540D" class="headerlink" title="5.签名"></a>5.签名</h4><p>用我们刚才生成的<code>test.keystore</code>给<code>app_fix.apk</code>签名，执行如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore test.keystore -signedjar app_signed.apk app_fix.apk <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>执行后需要录入keystore的口令，最后就会生成签名后的APK<code>app_signed.apk</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于Android二次打包，有的是为了更换证书，有的是为了修改资源，有的是为了注入广告，不管处于什么样的目的，都希望<br>用于正当渠道。废话不多说，直接进入正题。</p>]]>
    
    </summary>
    
      <category term="Android安全" scheme="http://yoursite.com/tags/Android%E5%AE%89%E5%85%A8/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ApkTool反编译报错]]></title>
    <link href="http://yoursite.com/2016/01/20/android-apktool-error/"/>
    <id>http://yoursite.com/2016/01/20/android-apktool-error/</id>
    <published>2016-01-20T11:59:19.000Z</published>
    <updated>2016-01-20T14:22:58.258Z</updated>
    <content type="html"><![CDATA[<p>今天需要使用ApkTool反编译APK，因为好久没用了，所以就去github上面下载最新的版本<a href="https://github.com/iBotPeaches/Apktool" target="_blank" rel="external">ApkTool</a><br>然后替换对应的jar和bash脚本</p>
<a id="more"></a>
<p>更新成功后，开始反编译APK，结果报出下面的异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> brut.androlib.err.UndefinedResObject: resource spec: <span class="number">0x01010490</span></span><br></pre></td></tr></table></figure></p>
<p>开始一直在研究这个异常是为什么，后来发现上面有一个提示，显示的是framework的目录里面的1.apk，这个编译<br>异常就是因为这个文件，我们只需要把这个目录的1.apk删除即可，当我们在进行反编译时候会在生成这个apk。<br>OS X里面存放的目录为/Users/username/Library/apktool/framework/1.apk</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天需要使用ApkTool反编译APK，因为好久没用了，所以就去github上面下载最新的版本<a href="https://github.com/iBotPeaches/Apktool">ApkTool</a><br>然后替换对应的jar和bash脚本</p>]]>
    
    </summary>
    
      <category term="ApkTool" scheme="http://yoursite.com/tags/ApkTool/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android安全之完整性校验]]></title>
    <link href="http://yoursite.com/2016/01/17/android-security/"/>
    <id>http://yoursite.com/2016/01/17/android-security/</id>
    <published>2016-01-17T00:14:19.000Z</published>
    <updated>2016-01-21T00:16:13.531Z</updated>
    <content type="html"><![CDATA[<p>最近在研究Android安全应用加固相关的技术，今天我先简单说下APK的完整性校验，首先我们先看一下一般APK里面的构造，下图为直接解压APK的目录结构：<br><a id="more"></a><br><img src="/images/android-integrity-01-20160120.png" alt="目录结构"><br>我们可以看到META-INF目录里面的MANIFEST.MF清单文件，里面记录了所有文件的SHA-1，<br>所以我们当我们APK包中资源或dex有改变时候，或者二次打包（关于二次打包可以看我另外一篇文章<br><a href="/2016/01/20/android-secondary-build/">Android二次打包</a>）的时候，<br>该清单文件都会改变，所以我们就可以校验这个文件来确保APK的完整性，中心思想说完了那么我们下面说一下具体实现。</p>
<p>首先，我们需要获取到META-INF目录，我们知道安装一个APK后，会在存放在手机如下目录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/im.xxx.app-<span class="number">1</span>.apk</span><br></pre></td></tr></table></figure></p>
<p>在代码中我们可以使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getPackageCodePath();</span><br></pre></td></tr></table></figure></p>
<p>获取该文件路径，因为/data/app目录是只读的，所以我们需要把该APK拷贝出来，比如拷贝到包目录下的<br>files或caches目录，然后我们把拷贝出来的APK解压到临时目录，我们这是就可以找到其对应的META-INF<br>目录，接下来我们需要做的就是校验清单文件，到这里，我们可以计算出当前运行APK清单文件的摘要，所以我们<br>只需要和我们打包时候清单文件摘要进行对比，即可得出当前APK是否被篡改，如果不相等即被篡改。那么打包时候<br>计算的摘要要放到那里呢，当然是META-INF目录里面，我在打包结束的时候，在META-INF中创建了一个文件，<br>文件名字为<code>SPECIAL-清单的md5</code>，所以我们在校验的时候，需要判断META-INF目录中以<code>SPECIAL-</code>开头的<br>文件是否存在，并且截取后面的摘要值和META-INF目录中MANIFEST.MF计算的摘要进行对比，部分实现代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//savePath = context.getFilesDir().getPath();</span></span><br><span class="line">            String copyPath = savePath.concat(<span class="string">"/copyApp.apk"</span>);</span><br><span class="line">            <span class="comment">//copy apk</span></span><br><span class="line">            FileUtils.copyFile(codePath, copyPath);</span><br><span class="line"></span><br><span class="line">            File copyApp = <span class="keyword">new</span> File(copyPath);</span><br><span class="line">            String renamePath = savePath.concat(<span class="string">"/copyApp.zip"</span>);</span><br><span class="line">            File renameApp = <span class="keyword">new</span> File(renamePath);</span><br><span class="line">            <span class="keyword">boolean</span> result = copyApp.renameTo(renameApp);</span><br><span class="line">            <span class="keyword">if</span> (result)&#123;</span><br><span class="line">                String decompressPath = savePath.concat(<span class="string">"/temp"</span> + System.currentTimeMillis());</span><br><span class="line">                <span class="comment">//decompress</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    FileUtils.decompressZip(renameApp, decompressPath);</span><br><span class="line">                    FileUtils.deleteFile(renameApp);</span><br><span class="line"></span><br><span class="line">                    File meta_inf = <span class="keyword">new</span> File(decompressPath + <span class="string">"/META-INF"</span>);</span><br><span class="line">                    File[] metaFileArray = meta_inf.listFiles();</span><br><span class="line">                    String checkEncryptDigest = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; metaFileArray.length; i++)&#123;</span><br><span class="line">                        <span class="keyword">final</span> String fileName = metaFileArray[i].getName();</span><br><span class="line">                        <span class="keyword">if</span> (fileName.startsWith(<span class="string">"SPECIAL-"</span>))&#123;</span><br><span class="line">                            checkEncryptDigest = fileName.substring(<span class="number">8</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Log.e(TAG, <span class="string">"fileName : "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(checkEncryptDigest))&#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"non integrity! file is not exists"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    File manifest_mf = <span class="keyword">new</span> File(decompressPath + <span class="string">"/META-INF/MANIFEST.MF"</span>);</span><br><span class="line">                    String digest = DigestUtils.md5(manifest_mf);</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(digest))&#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"original digest is null"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//todo 解密 checkEncryptDigest 得到摘要和 digest 进行比较</span></span><br><span class="line">                    String checkDigest = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (digest.equals(checkDigest))&#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"apk is integrity!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"non integrity!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p>
<p>所以，我们可以知道当前APK是否被篡改，以上为部分代码，里面涉及到了<code>FileUtils</code>和<code>DigestUtils</code>类，还有未对md5加密，所以最后创建在<br>META-INF中的文件应该是<code>SPECIAL-加密后的md5，并做Base64编码</code>，然后我们在代码里面解密后在进行校验（如果不加密，那么黑客在二次打包时候，<br>很容易知道这个文件是干什么的，所以可以自己生成一个二次打包后的校验文件，所以我们需要进行加密，这样就算知道文件的作用但是没有我们的密钥也无法<br>模拟创建校验文件）。后面整理完后，我会把工程整理好放到Github上。</p>
<p>有些同学会问，如何在打好的APK的META-INF中创建文件，下面贴出脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src_empty_file = <span class="string">"empty"</span></span><br><span class="line">src_apk = sys.argv[<span class="number">1</span>]</span><br><span class="line">shutil.copy(src_apk,channel_apk)</span><br><span class="line"></span><br><span class="line">zipped = zipfile.ZipFile(channel_apk, <span class="string">'a'</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">special_md5 = <span class="string">"META-INF/SPECIAL-&#123;md5&#125;"</span>.format(md5 = sys.argv[<span class="number">2</span>])</span><br><span class="line">zipped.write(src_empty_file, special_md5)</span><br><span class="line">zipped.close()</span><br></pre></td></tr></table></figure></p>
<p>所以调用时候传入两个参数，第一个为需要修改的APK路径，第二个参数为清单文件的MD5。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在研究Android安全应用加固相关的技术，今天我先简单说下APK的完整性校验，首先我们先看一下一般APK里面的构造，下图为直接解压APK的目录结构：<br>]]>
    
    </summary>
    
      <category term="Android安全" scheme="http://yoursite.com/tags/Android%E5%AE%89%E5%85%A8/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TextView支持的HTML标签]]></title>
    <link href="http://yoursite.com/2016/01/12/textview-html-tags/"/>
    <id>http://yoursite.com/2016/01/12/textview-html-tags/</id>
    <published>2016-01-12T05:39:26.000Z</published>
    <updated>2016-01-12T05:49:33.044Z</updated>
    <content type="html"><![CDATA[<p>Android中TextView并不支持所有的HTML标签，如果需要更为复杂的操作最好使用WebView，<br>今天再网上看到TextView支持的HTML标签的总结，记录在这里：<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">HTML Tags Supported By TextView</span><br><span class="line">There is a lovely method on the android.text.Html class, </span><br><span class="line">fromHtml(), that converts HTML into a Spannable for use with a TextView.</span><br><span class="line"></span><br><span class="line">However, the documentation does not stipulate what HTML tags are supported, </span><br><span class="line">which makes this method a bit hit-or-miss. More importantly, it means that you</span><br><span class="line">cannot rely on what it will support from release to release.</span><br><span class="line"></span><br><span class="line">I have filed an issue requesting that Google formally document what it intends </span><br><span class="line">to support. In the interim, from a quick look at the source code, here’s what </span><br><span class="line">seems to be supported as of Android 2.1:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dfn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">align</span>=<span class="value">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">"..."</span> <span class="attribute">color</span>=<span class="value">"..."</span> <span class="attribute">face</span>=<span class="value">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strike</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">u</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android中TextView并不支持所有的HTML标签，如果需要更为复杂的操作最好使用WebView，<br>今天再网上看到TextView支持的HTML标签的总结，记录在这里：<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git配置SSH]]></title>
    <link href="http://yoursite.com/2016/01/11/git-ssh-config/"/>
    <id>http://yoursite.com/2016/01/11/git-ssh-config/</id>
    <published>2016-01-11T13:07:32.000Z</published>
    <updated>2016-01-11T13:26:23.246Z</updated>
    <content type="html"><![CDATA[<h4 id="1-_u8BBE_u7F6EGit_u7684_u7528_u6237_u540D_u548C_u90AE_u4EF6"><a href="#1-_u8BBE_u7F6EGit_u7684_u7528_u6237_u540D_u548C_u90AE_u4EF6" class="headerlink" title="1.设置Git的用户名和邮件"></a>1.设置Git的用户名和邮件</h4><p>执行如下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;UserName&#34;&#10;git config --global user.email &#34;username@xx.xx&#34;</span><br></pre></td></tr></table></figure></p>
<p>将上面的UserName和username@xx.xx替换成你的用户名和邮件</p>
<h4 id="2-_u751F_u6210_u5BC6_u94A5"><a href="#2-_u751F_u6210_u5BC6_u94A5" class="headerlink" title="2.生成密钥"></a>2.生成密钥</h4><p>使用ssh-keygen生成密钥，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#34;username@xx.xx&#34;</span><br></pre></td></tr></table></figure></p>
<p>执行命令后，会提示录入密码，可忽略（如果不是第一次执行该命令，会提示是否覆盖），最后在用户目录下的.ssh目录<br>中会生成id_rsa和id_rsa.pub文件</p>
<h4 id="3-_u5C06_u5BC6_u94A5_u6DFB_u52A0_u81F3ssh-agent"><a href="#3-_u5C06_u5BC6_u94A5_u6DFB_u52A0_u81F3ssh-agent" class="headerlink" title="3.将密钥添加至ssh-agent"></a>3.将密钥添加至ssh-agent</h4><p>我们可以将密钥添加到ssh-agent中进行管理，再添加之前，需要确保ssh-agent可用，执行如下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &#34;$(ssh-agent -s)&#34;</span><br></pre></td></tr></table></figure></p>
<p>执行之后，会显示Agent的pid，然后我们用ssh-add将密钥添加到ssh-agent，执行如下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h4 id="4-_u6DFB_u52A0SSH_keys"><a href="#4-_u6DFB_u52A0SSH_keys" class="headerlink" title="4.添加SSH keys"></a>4.添加SSH keys</h4><p>在github的Settings中，找到SSh keys，点击Add SSH key，将id_rsa.pub内容添加即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="1-_u8BBE_u7F6EGit_u7684_u7528_u6237_u540D_u548C_u90AE_u4EF6"><a href="#1-_u8BBE_u7F6EGit_u7684_u7528_u6237_u540D_u548C_u90AE_u4EF6" ]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NodeJs更新]]></title>
    <link href="http://yoursite.com/2016/01/10/nodejs-update/"/>
    <id>http://yoursite.com/2016/01/10/nodejs-update/</id>
    <published>2016-01-10T04:55:44.000Z</published>
    <updated>2016-01-10T05:03:48.070Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_u66F4_u65B0npm"><a href="#1-_u66F4_u65B0npm" class="headerlink" title="1.更新npm"></a>1.更新npm</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure>
<h3 id="2-_u66F4_u65B0nodejs"><a href="#2-_u66F4_u65B0nodejs" class="headerlink" title="2.更新nodejs"></a>2.更新nodejs</h3><h4 id="1_29_Clear_NPM_u2019s_cache_3A"><a href="#1_29_Clear_NPM_u2019s_cache_3A" class="headerlink" title="1) Clear NPM’s cache:"></a>1) Clear NPM’s cache:</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br></pre></td></tr></table></figure>
<h4 id="2_29_Install_a_little_helper_called__u2018n_u2019"><a href="#2_29_Install_a_little_helper_called__u2018n_u2019" class="headerlink" title="2) Install a little helper called ‘n’"></a>2) Install a little helper called ‘n’</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br></pre></td></tr></table></figure>
<h4 id="3_29_Install_latest_stable_NodeJS_version"><a href="#3_29_Install_latest_stable_NodeJS_version" class="headerlink" title="3) Install latest stable NodeJS version"></a>3) Install latest stable NodeJS version</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n stable</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_u66F4_u65B0npm"><a href="#1-_u66F4_u65B0npm" class="headerlink" title="1.更新npm"></a>1.更新npm</h3><figure class="highlight"><table>]]>
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/tags/NodeJs/"/>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux后台运行与停止进程]]></title>
    <link href="http://yoursite.com/2016/01/10/linux-background-run-commond/"/>
    <id>http://yoursite.com/2016/01/10/linux-background-run-commond/</id>
    <published>2016-01-10T03:05:47.000Z</published>
    <updated>2016-01-10T04:25:09.176Z</updated>
    <content type="html"><![CDATA[<p>有时候我们在Terminal中其服务时候，需要让其在关闭Terminal的情况下也可以运行，那么我们这里用到的<br>是nohup命令，执行命令如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup &#60;commond&#62; &#38;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>比如我们运行hexo，那么我们只需要执行如下命令即可：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup hexo s &#38;</span><br></pre></td></tr></table></figure></p>
<p>有时候，我们需要停止后台运行，可以想到的是用kill：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill PID</span><br></pre></td></tr></table></figure></p>
<p>那么问题来了，怎么查看后台运行进程的PID，这里我们用ps命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux&#10;#a:&#26174;&#31034;&#25152;&#26377;&#31243;&#24207; u:&#20197;&#29992;&#25143;&#20026;&#20027;&#30340;&#26684;&#24335;&#26469;&#26174;&#31034; x:&#26174;&#31034;&#25152;&#26377;&#31243;&#24207;&#65292;&#19981;&#20197;&#32456;&#31471;&#26426;&#26469;&#21306;&#20998;</span><br></pre></td></tr></table></figure></p>
<p>执行后会出现所有的进程，这个是不容易找到我们需要停止进程的PID的，所以我们要查找指定的，<br>比如我们要查找hexo命令的进程，那么执行如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep hexo</span><br></pre></td></tr></table></figure></p>
<p>这样就会找到对应的进程，然后我们只需要查看其PID然后执行kill即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候我们在Terminal中其服务时候，需要让其在关闭Terminal的情况下也可以运行，那么我们这里用到的<br>是nohup命令，执行命令如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup &#60;commond&#62; &#38;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="nohup" scheme="http://yoursite.com/tags/nohup/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux Centos6.5 GLIBCXX和GLIBC编译错误]]></title>
    <link href="http://yoursite.com/2016/01/10/linux-glibcxxx-glibc/"/>
    <id>http://yoursite.com/2016/01/10/linux-glibcxxx-glibc/</id>
    <published>2016-01-10T02:43:40.000Z</published>
    <updated>2016-01-10T04:25:09.176Z</updated>
    <content type="html"><![CDATA[<p>今天在编译hexo的时候，报错如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#39; not found (required by clang)</span><br></pre></td></tr></table></figure></p>
<p>这个是关于C++的库libstdc++版本过低造成的，但是我记得我已经安装到了3.4.19，所以先看下库信息，</p>
<a id="more"></a>
<p>执行如下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBC</span><br></pre></td></tr></table></figure></p>
<p>得到如下结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLIBCXX_3.4&#10;GLIBCXX_3.4.1&#10;GLIBCXX_3.4.2&#10;GLIBCXX_3.4.3&#10;GLIBCXX_3.4.4&#10;GLIBCXX_3.4.5&#10;GLIBCXX_3.4.6&#10;GLIBCXX_3.4.7&#10;GLIBCXX_3.4.8&#10;GLIBCXX_3.4.9&#10;GLIBCXX_3.4.10&#10;GLIBCXX_3.4.11&#10;GLIBCXX_3.4.12&#10;GLIBCXX_3.4.13&#10;GLIBCXX_3.4.14&#10;GLIBCXX_3.4.15&#10;GLIBCXX_3.4.16&#10;GLIBCXX_3.4.17&#10;GLIBC_2.3&#10;GLIBC_2.2.5&#10;GLIBC_2.3.2&#10;GLIBCXX_FORCE_NEW&#10;GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure></p>
<p>发现缺少版本，然后执行如下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll  /usr/lib64/libstdc++.so.6</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 30 1&#26376;  10 10:22 /usr/lib64/libstdc++.so.6 -&#62; /usr/lib64/libstdc++.so.6.0.19</span><br></pre></td></tr></table></figure></p>
<p>发现我们已经有了6.0.19版本，现在我们要找它被装到哪里了，执行如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name libstdc++.so.6*</span><br></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib64/libstdc++.so.6.0.13&#10;/usr/lib64/libstdc++.so.6&#10;/usr/lib64/libstdc++.so.6.0.19&#10;/usr/lib64/libstdc++.so.6.0.17&#10;/usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.py&#10;/usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.pyo&#10;/usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.pyc&#10;/usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.py&#10;/usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.pyo&#10;/usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.pyc&#10;/usr/local/lib64/libstdc++.so.6.0.19-gdb.py&#10;/usr/local/lib64/libstdc++.so.6&#10;/usr/local/lib64/libstdc++.so.6.0.19&#10;/root/src/usr/lib/x86_64-linux-gnu/libstdc++.so.6&#10;/root/src/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17&#10;/root/src/gcc-4.8.5/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6&#10;/root/src/gcc-4.8.5/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.19&#10;/root/src/gcc-4.8.5/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6&#10;/root/src/gcc-4.8.5/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.19&#10;/root/src/gcc-4.8.5/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6&#10;/root/src/gcc-4.8.5/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.19</span><br></pre></td></tr></table></figure></p>
<p>我们看到 /usr/local/lib64/libstdc++.so.6.0.19 ，所以gcc安装时候把libstdc++.so.6.0.19安装到了<br>/usr/local/lib64目录下，所以我们现在只需要把libstdc++.so.6链接指向libstdc++.so.6.0.19即可，执行如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/lib64/libstdc++.so.6.0.19 /usr/lib64 &#10;rm -rf /usr/lib64/libstdc++.so.6 &#10;ln -s /usr/lib64/libstdc++.so.6.0.19 /usr/lib64/libstdc++.so.6</span><br></pre></td></tr></table></figure></p>
<p>然后我们在看下库信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLIBCXX_3.4&#10;GLIBCXX_3.4.1&#10;GLIBCXX_3.4.2&#10;GLIBCXX_3.4.3&#10;GLIBCXX_3.4.4&#10;GLIBCXX_3.4.5&#10;GLIBCXX_3.4.6&#10;GLIBCXX_3.4.7&#10;GLIBCXX_3.4.8&#10;GLIBCXX_3.4.9&#10;GLIBCXX_3.4.10&#10;GLIBCXX_3.4.11&#10;GLIBCXX_3.4.12&#10;GLIBCXX_3.4.13&#10;GLIBCXX_3.4.14&#10;GLIBCXX_3.4.15&#10;GLIBCXX_3.4.16&#10;GLIBCXX_3.4.17&#10;GLIBCXX_3.4.18&#10;GLIBCXX_3.4.19&#10;GLIBC_2.3&#10;GLIBC_2.2.5&#10;GLIBC_2.3.2&#10;GLIBCXX_FORCE_NEW&#10;GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure></p>
<p>此时我们已经支持到了3.4.19</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在编译hexo的时候，报错如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18&#39; not found (required by clang)</span><br></pre></td></tr></table></figure></p>
<p>这个是关于C++的库libstdc++版本过低造成的，但是我记得我已经安装到了3.4.19，所以先看下库信息，</p>]]>
    
    </summary>
    
      <category term="GLIBCXX" scheme="http://yoursite.com/tags/GLIBCXX/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView嵌套使用]]></title>
    <link href="http://yoursite.com/2016/01/09/recyclerview-nestedscrollView/"/>
    <id>http://yoursite.com/2016/01/09/recyclerview-nestedscrollView/</id>
    <published>2016-01-09T02:32:22.000Z</published>
    <updated>2016-01-11T13:26:23.246Z</updated>
    <content type="html"><![CDATA[<p>一般情况下RecyclerView是不推荐嵌套使用的，我们可以用使用不同的Type使RecyclerView达到嵌套的效果，<br>这里先不介绍这种方式。因为最近项目需要将RecyclerView嵌套在NestedScrollView中使用，下面记录一下<br>在NestedScrollView中如何使用RecyclerView。</p>
<a id="more"></a>
<h4 id="u5982_u4F55_u4F7F_u7528"><a href="#u5982_u4F55_u4F7F_u7528" class="headerlink" title="如何使用"></a>如何使用</h4><p>首先我们先看下布局文件<br><img src="/images/recyclerview-060105.png" alt="Smithsonian Image"><br>在我们使用ListView的时候，如果需要嵌套，我们一般的做法是重写ListView的onMearsure方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123; </span><br><span class="line">              <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, MeasureSpec.AT_MOST); </span><br><span class="line">              <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是RecyclerView并不是这样做，而是通过修改RecyclerView.LayoutManager实现，比如重写LinearLayoutManager，GridLayoutManager<br>或StaggeredGridLayoutManager，下面我们以LinearLayoutManager为例，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrappingLinearLayoutManager</span> <span class="keyword">extends</span> <span class="title">LinearLayoutManager</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrappingLinearLayoutManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mMeasuredDimension = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canScrollVertically</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span><br><span class="line">            <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getItemCount(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getOrientation() == HORIZONTAL) &#123;</span><br><span class="line">                measureScrapChild(recycler, i,</span><br><span class="line">                        View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED),</span><br><span class="line">                        heightSpec,</span><br><span class="line">                        mMeasuredDimension);</span><br><span class="line"></span><br><span class="line">                width = width + mMeasuredDimension[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    height = mMeasuredDimension[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                measureScrapChild(recycler, i,</span><br><span class="line">                        widthSpec,</span><br><span class="line">                        View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED),</span><br><span class="line">                        mMeasuredDimension);</span><br><span class="line"></span><br><span class="line">                height = height + mMeasuredDimension[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    width = mMeasuredDimension[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (widthMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</span><br><span class="line">                width = widthSize;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (heightMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</span><br><span class="line">                height = heightSize;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureScrapChild</span><span class="params">(RecyclerView.Recycler recycler, <span class="keyword">int</span> position, <span class="keyword">int</span> widthSpec,</span><br><span class="line">            <span class="keyword">int</span> heightSpec, <span class="keyword">int</span>[] measuredDimension)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        View view = recycler.getViewForPosition(position);</span><br><span class="line">        <span class="keyword">if</span> (view.getVisibility() == View.GONE) &#123;</span><br><span class="line">            measuredDimension[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            measuredDimension[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// For adding Item Decor Insets to view</span></span><br><span class="line">        <span class="keyword">super</span>.measureChildWithMargins(view, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();</span><br><span class="line">        <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(</span><br><span class="line">                widthSpec,</span><br><span class="line">                getPaddingLeft() + getPaddingRight() + getDecoratedLeft(view) + getDecoratedRight(view),</span><br><span class="line">                p.width);</span><br><span class="line">        <span class="keyword">int</span> childHeightSpec = ViewGroup.getChildMeasureSpec(</span><br><span class="line">                heightSpec,</span><br><span class="line">                getPaddingTop() + getPaddingBottom() + getDecoratedTop(view) + getDecoratedBottom(view),</span><br><span class="line">                p.height);</span><br><span class="line">        view.measure(childWidthSpec, childHeightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get decorated measurements</span></span><br><span class="line">        measuredDimension[<span class="number">0</span>] = getDecoratedMeasuredWidth(view) + p.leftMargin + p.rightMargin;</span><br><span class="line">        measuredDimension[<span class="number">1</span>] = getDecoratedMeasuredHeight(view) + p.bottomMargin + p.topMargin;</span><br><span class="line">        recycler.recycleView(view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们给RecyclerView设置我们自定义的LayoutManager，然后禁止RecyclerView滑动和设置其可改变大小，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> WrappingLinearLayoutManager(getContext()));</span><br><span class="line">mRecyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>); </span><br><span class="line">mRecyclerView.setHasFixedSize(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p>
<p>现在就可以实现RecyclerView嵌套使用了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般情况下RecyclerView是不推荐嵌套使用的，我们可以用使用不同的Type使RecyclerView达到嵌套的效果，<br>这里先不介绍这种方式。因为最近项目需要将RecyclerView嵌套在NestedScrollView中使用，下面记录一下<br>在NestedScrollView中如何使用RecyclerView。</p>]]>
    
    </summary>
    
      <category term="RecyclerView" scheme="http://yoursite.com/tags/RecyclerView/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Http请求适配性封装]]></title>
    <link href="http://yoursite.com/2016/01/09/mhttpadapter/"/>
    <id>http://yoursite.com/2016/01/09/mhttpadapter/</id>
    <published>2016-01-09T02:32:09.000Z</published>
    <updated>2016-01-11T13:26:23.246Z</updated>
    <content type="html"><![CDATA[<p>现在强大的第三方网络请求库太多了，比如OkHttp，android-async-http等，我们在用这些第三方网络请求库的时候，一般因为<br>项目需求，都会简单的做一层封装，下面我就来说我对此的理解。</p>
<a id="more"></a>
<p>因为项目在使用第三方请求库的时候，很可能今天用A库明天用B库，这样换来换去太烦了，所以在封装第三方请求库的时候要有自己<br>的一套规范，我们只需要用第三方请求库实现这套规范就可以了，比如我们定义一个接口，具体如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpClientInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">         * 执行请求</span><br><span class="line">         * </span><br><span class="line">         * <span class="doctag">@param</span> httpRequest   请求对象</span><br><span class="line">         * <span class="doctag">@return</span>              this</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function">HttpClientInterface <span class="title">execute</span><span class="params">(HttpRequest httpRequest)</span></span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 取消请求</span><br><span class="line">         * </span><br><span class="line">         * <span class="doctag">@param</span> request   请求对象</span><br><span class="line">         * <span class="doctag">@return</span>          this</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function">HttpClientInterface <span class="title">cancel</span><span class="params">(HttpRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在我们用第三方库的时候，需要实现我们定义的规范，这里以OkHttp为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*package*/</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpClientImpl</span> <span class="keyword">implements</span> <span class="title">HttpClientInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line">     </span><br><span class="line">     <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> HttpClientInterface <span class="title">execute</span><span class="params">(HttpRequest httpRequest)</span> </span>&#123;</span><br><span class="line">            setUrl(httpRequest.getRequestUrl());</span><br><span class="line">            setTimeout(httpRequest.getTimeout());</span><br><span class="line">            setHeaders(httpRequest.getHeaders());</span><br><span class="line">            setRequestParams(httpRequest.getRequestParams(), httpRequest.getMethod());</span><br><span class="line">            setResponseHandler(httpRequest);</span><br><span class="line">            setTag(httpRequest.getTag());</span><br><span class="line">            <span class="keyword">switch</span> (httpRequest.getMethod())&#123;</span><br><span class="line">                <span class="keyword">case</span> HttpRequest.Method.GET: &#123;</span><br><span class="line">                    get(httpRequest);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> HttpRequest.Method.POST: &#123;</span><br><span class="line">                    post(httpRequest);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> HttpClientInterface <span class="title">cancel</span><span class="params">(<span class="keyword">final</span> HttpRequest request)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (weakCall != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">final</span> Call call = weakCall.get();</span><br><span class="line">                <span class="keyword">if</span> (call != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="annotation">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            call.cancel();</span><br><span class="line">                            <span class="keyword">if</span> (responseHandler != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                responseHandler.sendCancelMessage();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">    </span><br><span class="line">                    <span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper())&#123;</span><br><span class="line">                        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们只需要对应的实现execute和cancel方法，当然可能还需抽象其它的方法，这里不在赘述。所以现在我们只需要通过接口的方式<br>去调用请求，为了使用方便，我还定义了一套Annotation，如@Get、@Post等，具体的实现请参见源码，文章末尾github地址。</p>
<h3 id="u5982_u4F55_u4F7F_u7528"><a href="#u5982_u4F55_u4F7F_u7528" class="headerlink" title="如何使用"></a>如何使用</h3><p>通常我们在使用网络请求时候，都会有一些公共的设置，如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApi</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@RootURL</span>(<span class="string">"http://root.com/"</span>) String baseURL;</span><br><span class="line">    <span class="annotation">@Timeout</span>(<span class="number">40</span>) String timeout;</span><br><span class="line">    <span class="annotation">@RequestContentType</span>(RequestParams.APPLICATION_FORM) String Content_Type;</span><br><span class="line">    <span class="annotation">@Header</span>(<span class="string">"Android"</span>) String User_Agent;</span><br><span class="line">        </span><br><span class="line">    <span class="annotation">@CommonParamsMethod</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; getCommonParams() &#123;</span><br><span class="line">      Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      params.put(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">      <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApi</span> <span class="keyword">extends</span> <span class="title">BaseApi</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="annotation">@Post</span>(url=<span class="string">"test"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testApi</span><span class="params">(@Callback TextResponseHandler callback)</span></span>;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>其中BaseApi为我们对网络请求的公共设置，根地址为”<a href="http://root.com/&quot;,超时时间为40秒，Content-type为Form，" target="_blank" rel="external">http://root.com/&quot;,超时时间为40秒，Content-type为Form，</a><br>还有一些公共请求参数。当我们在写自己的请求时候，只需要继承BaseApi这个类，就像刚才的例子一样，url只需要传相对<br>路径test，这样最终的请求url为”<a href="http://root.com/test&quot;。当然我们也可以写绝对路径，如&quot;https://www.baidu.com" target="_blank" rel="external">http://root.com/test&quot;。当然我们也可以写绝对路径，如&quot;https://www.baidu.com</a>“,<br>这样就不会再使用相对路径的方式进行拼接。<br>下面这例子就是一个简单的接口定义，和调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApi</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleApi <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HttpRequest.inject(SimpleApi.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Post</span>(url=<span class="string">"http://test.com"</span>, timeout=<span class="number">40</span>, tag=<span class="string">"tag"</span>, heads = &#123;<span class="string">"key"</span>, <span class="string">"value"</span>&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testApi</span><span class="params">(String key0,</span><br><span class="line">                               String key1,</span><br><span class="line">                               @Callback JSONResponseHandler callback)</span></span>;</span><br><span class="line">                               </span><br><span class="line">  <span class="annotation">@GET</span>(url=<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> HttpRequest <span class="title">testApi2</span><span class="params">(@Callback JSONResponseHandler callback)</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeTestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">      SimpleApi.instance().testApi(<span class="string">"value0"</span>, <span class="string">"value1"</span>, <span class="keyword">new</span> JSONResponseHandler()&#123;</span><br><span class="line">      </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(JSONObject jsonObject, HttpResponse response)</span></span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//auto execute</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeTestApi2</span><span class="params">()</span></span>&#123;</span><br><span class="line">      HttpRequest request = SimpleApi.instance().testApi2(<span class="keyword">new</span> JSONResponseHandler()&#123;</span><br><span class="line">      </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(JSONObject jsonObject, HttpResponse response)</span></span>&#123;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//execute</span></span><br><span class="line">      request.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样我们就可以适配各种第三方网络请求库了，只需要实现我们定义的接口即可，具体代码请参见<a href="https://github.com/motcwang/MHttpAdapter" target="_blank" rel="external">MHttpAdapter</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在强大的第三方网络请求库太多了，比如OkHttp，android-async-http等，我们在用这些第三方网络请求库的时候，一般因为<br>项目需求，都会简单的做一层封装，下面我就来说我对此的理解。</p>]]>
    
    </summary>
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sencha-touch-chrome43]]></title>
    <link href="http://yoursite.com/2016/01/08/sencha-touch-chrome43/"/>
    <id>http://yoursite.com/2016/01/08/sencha-touch-chrome43/</id>
    <published>2016-01-08T00:42:43.000Z</published>
    <updated>2016-01-10T00:57:31.026Z</updated>
    <content type="html"><![CDATA[<p>解决 Sencha Touch 在 Chrome 43 上面滑动问题的bug<br><img src="/images/Screen-Shot-2015-04-28-at-9.10.36-AM.png" alt="Smithsonian Image"></p>
<a id="more"></a>
<p>在初始化 Sencha Touch 时，重写 Ext.util.SizeMonitor 和 Ext.util.PaintMonitor:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ext.override(Ext.util.SizeMonitor, &#123;</span><br><span class="line">    constructor: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> namespace = Ext.util.sizemonitor;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Ext.browser.is.Firefox) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> namespace.OverflowChange(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Ext.browser.is.WebKit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Ext.browser.is.Silk &amp;amp;&amp;amp; Ext.browser.engineVersion.gtEq(<span class="string">'535'</span>) &amp;amp;&amp;amp; !Ext.browser.engineVersion.ltEq(<span class="string">'537.36'</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> namespace.OverflowChange(config);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> namespace.Scroll(config);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Ext.browser.is.IE11) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> namespace.Scroll(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> namespace.Scroll(config);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ext.override(Ext.util.PaintMonitor, &#123;</span><br><span class="line">  constructor: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (Ext.browser.is.Firefox || (Ext.browser.is.WebKit &amp;amp;&amp;amp; Ext.browser.engineVersion.gtEq(<span class="string">'536'</span>) &amp;amp;&amp;amp; !Ext.browser.engineVersion.ltEq(<span class="string">'537.36'</span>) &amp;amp;&amp;amp; !Ext.os.is.Blackberry)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Ext.util.paintmonitor.OverflowChange(config);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Ext.util.paintmonitor.CssAnimation(config);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>解决 Sencha Touch 在 Chrome 43 上面滑动问题的bug<br><img src="/images/Screen-Shot-2015-04-28-at-9.10.36-AM.png" alt="Smithsonian Image"></p>]]>
    
    </summary>
    
      <category term="sencha touch" scheme="http://yoursite.com/tags/sencha-touch/"/>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
  </entry>
  
</feed>
